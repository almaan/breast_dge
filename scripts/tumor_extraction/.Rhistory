scran_size_factors <- computeSumFactors(count_matrix, positive = TRUE)
se <- SummarizedExperiment(assays = count_matrix, colData = feature_matrix)
remove(count_matrix)
remove(feature_matrix)
dds <- DESeqDataSet(se, design = design_formula)
sizeFactors(dds) <- scran_size_factors
dds$tumor <- relevel(dds$tumor, "tumor")
dds<-DESeq(dds, parallel = TRUE,BPPARAM = bpparam("SnowParam"))
return(dds)
}
dds <- DESeq_pipline(matrices$count_matrix, matrices$feature_matrix, design_formula = design_formula)
DESeq_pipline <- function(count_matrix, feature_matrix, design_formula) {
count_matrix <- count_matrix[,c(1:500)]
feature_matrix <- feature_matrix[c(1:500),]
scran_size_factors <- computeSumFactors(count_matrix, positive = TRUE)
se <- SummarizedExperiment(assays = count_matrix, colData = feature_matrix)
remove(count_matrix)
remove(feature_matrix)
dds <- DESeqDataSet(se, design = design_formula)
sizeFactors(dds) <- scran_size_factors
dds$tumor <- relevel(dds$tumor, "tumor")
dds<-DESeq(dds, parallel = TRUE,BPPARAM = bpparam("SnowParam"))
return(dds)
}
dds <- DESeq_pipline(matrices$count_matrix, matrices$feature_matrix, design_formula = design_formula)
DESeq_pipline <- function(count_matrix, feature_matrix, design_formula) {
scran_size_factors <- computeSumFactors(count_matrix, positive = TRUE)
se <- SummarizedExperiment(assays = count_matrix, colData = feature_matrix)
remove(count_matrix)
remove(feature_matrix)
dds <- DESeqDataSet(se, design = design_formula)
sizeFactors(dds) <- scran_size_factors
dds$tumor <- relevel(dds$tumor, "tumor")
dds<-DESeq(dds, parallel = TRUE,BPPARAM = bpparam("SnowParam"))
return(dds)
}
dds <- DESeq_pipline(matrices$count_matrix, matrices$feature_matrix, design_formula = design_formula)
matrices <- generate_matrices(count_pth = count_input_dir, feature_pth = feature_input_dir,select_for)
remove(q)
count_matrix <- matrices$count_matrix
feature_matriz <- matrices$colData
scran_size_factors <- computeSumFactors(count_matrix, positive = TRUE)
dds <- DESeqDataSet(se, design = design_formula)
se <- SummarizedExperiment(assays = count_matrix, colData = feature_matrix)
dim(count_matrix)
dim(feature_matrix)
matrices$colData
dim(count_matrix)
dim(feature_matriz)
feature_matrix <- feature_matriz
se <- SummarizedExperiment(assays = count_matrix, colData = feature_matrix)
dds <- DESeqDataSet(se, design = design_formula)
dds$tumor <- relevel(dds$tumor, "tumor")
dds<-DESeq(dds, parallel = TRUE,BPPARAM = bpparam("SnowParam"))
c(1:10:100)
c(1:100:10)
c(1:100,10)
seq(1:10:100)
seq(1,10,100)
seq(1,100,ยง0)
seq(1,100,ยง0)
seq(1,100,10)
DESeq_pipline <- function(count_matrix, feature_matrix, design_formula) {
count_matrix <- count_matrix(c(1:500),seq(1,1000,10))
feature_matrix <- feature_matrix[seq(1,100,10),]
scran_size_factors <- computeSumFactors(count_matrix, positive = TRUE)
se <- SummarizedExperiment(assays = count_matrix, colData = feature_matrix)
remove(count_matrix)
remove(feature_matrix)
dds <- DESeqDataSet(se, design = design_formula)
sizeFactors(dds) <- scran_size_factors
dds$tumor <- relevel(dds$tumor, "tumor")
dds<-DESeq(dds, parallel = TRUE,BPPARAM = bpparam("SnowParam"))
return(dds)
}
count_input_dir <- "/home/alma/ST-2018/CNNp/DGE/data/test_dge_expression"
feature_input_dir <- "/home/alma/ST-2018/CNNp/DGE/data/YAO_feature_files"
design_file <- "/home/alma/ST-2018/CNNp/DGE/data/test_data/design_file_test.dat"
select_for = NULL
main(count_input_dir = pth_counts, feature_input_dir = pth_features, design_file = design_file, select_for = NULL)
DESeq_pipline <- function(count_matrix, feature_matrix, design_formula) {
count_matrix <- count_matrix[c(1:500),seq(1,1000,10)]
feature_matrix <- feature_matrix[seq(1,100,10),]
scran_size_factors <- computeSumFactors(count_matrix, positive = TRUE)
se <- SummarizedExperiment(assays = count_matrix, colData = feature_matrix)
remove(count_matrix)
remove(feature_matrix)
dds <- DESeqDataSet(se, design = design_formula)
sizeFactors(dds) <- scran_size_factors
dds$tumor <- relevel(dds$tumor, "tumor")
dds<-DESeq(dds, parallel = TRUE,BPPARAM = bpparam("SnowParam"))
return(dds)
}
main(count_input_dir = pth_counts, feature_input_dir = pth_features, design_file = design_file, select_for = NULL)
DESeq_pipline <- function(count_matrix, feature_matrix, design_formula) {
count_matrix <- count_matrix[c(1:500),seq(1,1000,10)]
feature_matrix <- feature_matrix[seq(1,1000,10),]
scran_size_factors <- computeSumFactors(count_matrix, positive = TRUE)
se <- SummarizedExperiment(assays = count_matrix, colData = feature_matrix)
remove(count_matrix)
remove(feature_matrix)
dds <- DESeqDataSet(se, design = design_formula)
sizeFactors(dds) <- scran_size_factors
dds$tumor <- relevel(dds$tumor, "tumor")
dds<-DESeq(dds, parallel = TRUE,BPPARAM = bpparam("SnowParam"))
return(dds)
}
main(count_input_dir = pth_counts, feature_input_dir = pth_features, design_file = design_file, select_for = NULL)
register(snowparam, default = TRUE)
registered()
DESeq_pipline <- function(count_matrix, feature_matrix, design_formula) {
count_matrix <- count_matrix[c(1:500),seq(1,1000,10)]
feature_matrix <- feature_matrix[seq(1,1000,10),]
scran_size_factors <- computeSumFactors(count_matrix, positive = TRUE)
se <- SummarizedExperiment(assays = count_matrix, colData = feature_matrix)
remove(count_matrix)
remove(feature_matrix)
dds <- DESeqDataSet(se, design = design_formula)
sizeFactors(dds) <- scran_size_factors
dds$tumor <- relevel(dds$tumor, "tumor")
dds<-DESeq(dds,
#parallel = TRUE,
#BPPARAM = bpparam("SnowParam")
)
return(dds)
}
main(count_input_dir = pth_counts, feature_input_dir = pth_features, design_file = design_file, select_for = NULL)
count_input_dir <- "/home/alma/ST-2018/CNNp/DGE/data/test_dge_expression"
count_input_dir <- "/home/alma/ST-2018/CNNp/DGE/data/test_dge_expression"
feature_input_dir <- "/home/alma/ST-2018/CNNp/DGE/data/YAO_feature_files"
design_file <- "/home/alma/ST-2018/CNNp/DGE/data/test_data/design_file_test.dat"
select_for = NULL
main(count_input_dir = pth_counts, feature_input_dir = pth_features, design_file = design_file, select_for = NULL)
library(SummarizedExperiment)
library(DESeq2)
library(ggplot2)
library(scran)
library(stringr)
library(optparse)
library(dplyr)
load_matrix <- function(main_pth, file_name, nrows = -1){
mat <- read.csv(paste(c(main_pth,file_name),collapse="/"), sep = "\t", nrows = nrows, header = TRUE, row.names = 1)
return(mat)
}
load_features <- function(main_pth,file_name) {
feat <- read.csv(paste(c(main_pth,file_name),collapse="/"), sep = "\t",
header = TRUE, row.names = 1, stringsAsFactors = TRUE)
return(feat)
}
get_id <- function(path) {
return(str_extract(path,pattern = "\\d{4,5}_\\w{2}"))
}
clean_matrix <- function(mat, min_spot = 100, min_gene = 0.1){
keep_genes <- colMeans(mat) >= min_gene
keep_spots <- rowSums(mat) >= min_spot
return(mat[keep_spots,keep_genes])
}
generate_matrices <- function(count_pth,feature_pth,select_for ){
pattern_cnt <- "count.*tsv"
pattern_fea <-"*tsv"
count_files <- sort(list.files(pth_counts,pattern = pattern_cnt))
if (!is.null(select_for)) {
selected_samples <- readLines(file(select_for,"r"))
selected_samples <- selected_samples[sapply(selected_samples, function(x) x != "")]
unlink(select_for)
count_files <- count_files[sapply(count_files, function(x) get_id(x) %in% selected_samples)]
}
feature_files <- list.files(pth_features, pattern = pattern_fea)
count_matrix <- data.frame()
feature_matrix <- data.frame()
for(k in c(1:length(count_files))) {
cmat <- load_matrix(pth_counts,count_files[k])
cmat <- clean_matrix(cmat)
tag <- get_id(count_files[k])
fmat_name <- grep(paste(c(".*",tag,".*"),collapse = ""),feature_files)
fmat <- load_features(pth_features,feature_files[fmat_name])
inter <- intersect(rownames(fmat),rownames(cmat))
fmat <-fmat[inter,]
fmat[c('patient','replicate')] <- unlist(strsplit(tag,'_'))
cmat <- cmat[inter,]
count_matrix <- bind_rows(count_matrix,cmat)
feature_matrix <- bind_rows(feature_matrix,fmat)
}
rownames(count_matrix) <- c(1:dim(count_matrix)[1])
rownames(feature_matrix) <- c(1:dim(feature_matrix)[1])
count_matrix[is.na(count_matrix)] <- 0
count_matrix <-t(count_matrix)
return(list(count_matrix = count_matrix, colData = feature_matrix))
}
DESeq_pipline <- function(count_matrix, feature_matrix, design_formula) {
count_matrix <- count_matrix[c(1:500),seq(1,1000,10)]
feature_matrix <- feature_matrix[seq(1,1000,10),]
scran_size_factors <- computeSumFactors(count_matrix, positive = TRUE)
se <- SummarizedExperiment(assays = count_matrix, colData = feature_matrix)
remove(count_matrix)
remove(feature_matrix)
dds <- DESeqDataSet(se, design = design_formula)
sizeFactors(dds) <- scran_size_factors
dds$tumor <- relevel(dds$tumor, "tumor")
dds<-DESeq(dds,
#parallel = TRUE,
#BPPARAM = bpparam("SnowParam")
)
return(dds)
}
main <- function(count_input_dir,
feature_input_dir,
select_for,
design_file){
design_formula <- as.formula(readLines(file(design_file,"r")))
unlink(file(design_file))
matrices <- generate_matrices(count_pth = count_input_dir, feature_pth = feature_input_dir,select_for)
dds <- DESeq_pipline(matrices$count_matrix, matrices$feature_matrix, design_formula = design_formula)
res <- results(dds)
}
main(count_input_dir = pth_counts, feature_input_dir = pth_features, design_file = design_file, select_for = NULL)
count_input_dir <- "/home/alma/ST-2018/CNNp/DGE/data/test_dge_expression"
feature_input_dir <- "/home/alma/ST-2018/CNNp/DGE/data/YAO_feature_files"
design_file <- "/home/alma/ST-2018/CNNp/DGE/data/test_data/design_file_test.dat"
select_for = NULL
main(count_input_dir = count_input_dir, feature_input_dir = feature_input_dir, design_file = design_file, select_for = NULL)
generate_matrices <- function(count_pth,feature_pth,select_for ){
pattern_cnt <- "count.*tsv"
pattern_fea <-"*tsv"
count_files <- sort(list.files(count_pth,pattern = pattern_cnt))
if (!is.null(select_for)) {
selected_samples <- readLines(file(select_for,"r"))
selected_samples <- selected_samples[sapply(selected_samples, function(x) x != "")]
unlink(select_for)
count_files <- count_files[sapply(count_files, function(x) get_id(x) %in% selected_samples)]
}
feature_files <- list.files(pth_features, pattern = pattern_fea)
count_matrix <- data.frame()
feature_matrix <- data.frame()
for(k in c(1:length(count_files))) {
cmat <- load_matrix(pth_counts,count_files[k])
cmat <- clean_matrix(cmat)
tag <- get_id(count_files[k])
fmat_name <- grep(paste(c(".*",tag,".*"),collapse = ""),feature_files)
fmat <- load_features(pth_features,feature_files[fmat_name])
inter <- intersect(rownames(fmat),rownames(cmat))
fmat <-fmat[inter,]
fmat[c('patient','replicate')] <- unlist(strsplit(tag,'_'))
cmat <- cmat[inter,]
count_matrix <- bind_rows(count_matrix,cmat)
feature_matrix <- bind_rows(feature_matrix,fmat)
}
rownames(count_matrix) <- c(1:dim(count_matrix)[1])
rownames(feature_matrix) <- c(1:dim(feature_matrix)[1])
count_matrix[is.na(count_matrix)] <- 0
count_matrix <-t(count_matrix)
return(list(count_matrix = count_matrix, colData = feature_matrix))
}
main(count_input_dir = count_input_dir, feature_input_dir = feature_input_dir, design_file = design_file, select_for = NULL)
generate_matrices <- function(count_pth,feature_pth,select_for ){
pattern_cnt <- "count.*tsv"
pattern_fea <-"*tsv"
count_files <- sort(list.files(count_pth,pattern = pattern_cnt))
if (!is.null(select_for)) {
selected_samples <- readLines(file(select_for,"r"))
selected_samples <- selected_samples[sapply(selected_samples, function(x) x != "")]
unlink(select_for)
count_files <- count_files[sapply(count_files, function(x) get_id(x) %in% selected_samples)]
}
feature_files <- list.files(feature_pth, pattern = pattern_fea)
count_matrix <- data.frame()
feature_matrix <- data.frame()
for(k in c(1:length(count_files))) {
cmat <- load_matrix(pth_counts,count_files[k])
cmat <- clean_matrix(cmat)
tag <- get_id(count_files[k])
fmat_name <- grep(paste(c(".*",tag,".*"),collapse = ""),feature_files)
fmat <- load_features(pth_features,feature_files[fmat_name])
inter <- intersect(rownames(fmat),rownames(cmat))
fmat <-fmat[inter,]
fmat[c('patient','replicate')] <- unlist(strsplit(tag,'_'))
cmat <- cmat[inter,]
count_matrix <- bind_rows(count_matrix,cmat)
feature_matrix <- bind_rows(feature_matrix,fmat)
}
rownames(count_matrix) <- c(1:dim(count_matrix)[1])
rownames(feature_matrix) <- c(1:dim(feature_matrix)[1])
count_matrix[is.na(count_matrix)] <- 0
count_matrix <-t(count_matrix)
return(list(count_matrix = count_matrix, colData = feature_matrix))
}
main(count_input_dir = count_input_dir, feature_input_dir = feature_input_dir, design_file = design_file, select_for = NULL)
generate_matrices <- function(count_pth,feature_pth,select_for ){
pattern_cnt <- "count.*tsv"
pattern_fea <-"*tsv"
count_files <- sort(list.files(count_pth,pattern = pattern_cnt))
if (!is.null(select_for)) {
selected_samples <- readLines(file(select_for,"r"))
selected_samples <- selected_samples[sapply(selected_samples, function(x) x != "")]
unlink(select_for)
count_files <- count_files[sapply(count_files, function(x) get_id(x) %in% selected_samples)]
}
feature_files <- list.files(feature_pth, pattern = pattern_fea)
count_matrix <- data.frame()
feature_matrix <- data.frame()
for(k in c(1:length(count_files))) {
cmat <- load_matrix(count_pth,count_files[k])
cmat <- clean_matrix(cmat)
tag <- get_id(count_files[k])
fmat_name <- grep(paste(c(".*",tag,".*"),collapse = ""),feature_files)
fmat <- load_features(feature_pth,feature_files[fmat_name])
inter <- intersect(rownames(fmat),rownames(cmat))
fmat <-fmat[inter,]
fmat[c('patient','replicate')] <- unlist(strsplit(tag,'_'))
cmat <- cmat[inter,]
count_matrix <- bind_rows(count_matrix,cmat)
feature_matrix <- bind_rows(feature_matrix,fmat)
}
rownames(count_matrix) <- c(1:dim(count_matrix)[1])
rownames(feature_matrix) <- c(1:dim(feature_matrix)[1])
count_matrix[is.na(count_matrix)] <- 0
count_matrix <-t(count_matrix)
return(list(count_matrix = count_matrix, colData = feature_matrix))
}
main(count_input_dir = args$count_dir,
feature_input_dir = args$feature_dir,
design_file = args$design_file)
main(count_input_dir = count_input_dir, feature_input_dir = feature_input_dir, design_file = design_file, select_for = NULL)
library(SummarizedExperiment)
library(DESeq2)
library(ggplot2)
library(scran)
library(stringr)
library(optparse)
library(dplyr)
load_matrix <- function(main_pth, file_name, nrows = -1){
mat <- read.csv(paste(c(main_pth,file_name),collapse="/"), sep = "\t", nrows = nrows, header = TRUE, row.names = 1)
return(mat)
}
load_features <- function(main_pth,file_name) {
feat <- read.csv(paste(c(main_pth,file_name),collapse="/"), sep = "\t",
header = TRUE, row.names = 1, stringsAsFactors = TRUE)
return(feat)
}
get_id <- function(path) {
return(str_extract(path,pattern = "\\d{4,5}_\\w{2}"))
}
clean_matrix <- function(mat, min_spot = 100, min_gene = 0.1){
keep_genes <- colMeans(mat) >= min_gene
keep_spots <- rowSums(mat) >= min_spot
return(mat[keep_spots,keep_genes])
}
generate_matrices <- function(count_pth,feature_pth,select_for ){
pattern_cnt <- "count.*tsv"
pattern_fea <-"*tsv"
count_files <- sort(list.files(count_pth,pattern = pattern_cnt))
if (!is.null(select_for)) {
selected_samples <- readLines(file(select_for,"r"))
selected_samples <- selected_samples[sapply(selected_samples, function(x) x != "")]
unlink(select_for)
count_files <- count_files[sapply(count_files, function(x) get_id(x) %in% selected_samples)]
}
feature_files <- list.files(feature_pth, pattern = pattern_fea)
count_matrix <- data.frame()
feature_matrix <- data.frame()
for(k in c(1:length(count_files))) {
cmat <- load_matrix(count_pth,count_files[k])
cmat <- clean_matrix(cmat)
tag <- get_id(count_files[k])
fmat_name <- grep(paste(c(".*",tag,".*"),collapse = ""),feature_files)
fmat <- load_features(feature_pth,feature_files[fmat_name])
inter <- intersect(rownames(fmat),rownames(cmat))
fmat <-fmat[inter,]
fmat[c('patient','replicate')] <- unlist(strsplit(tag,'_'))
cmat <- cmat[inter,]
count_matrix <- bind_rows(count_matrix,cmat)
feature_matrix <- bind_rows(feature_matrix,fmat)
}
rownames(count_matrix) <- c(1:dim(count_matrix)[1])
rownames(feature_matrix) <- c(1:dim(feature_matrix)[1])
count_matrix <- count_matrix[c(1:500),seq(1,1000,10)]
feature_matrix <- feature_matrix[seq(1,1000,10),]
count_matrix[is.na(count_matrix)] <- 0
count_matrix <-t(count_matrix)
return(list(count_matrix = count_matrix, colData = feature_matrix))
}
DESeq_pipline <- function(count_matrix, feature_matrix, design_formula) {
scran_size_factors <- computeSumFactors(count_matrix, positive = TRUE)
se <- SummarizedExperiment(assays = count_matrix, colData = feature_matrix)
remove(count_matrix)
remove(feature_matrix)
dds <- DESeqDataSet(se, design = design_formula)
sizeFactors(dds) <- scran_size_factors
dds$tumor <- relevel(dds$tumor, "tumor")
dds<-DESeq(dds,
#parallel = TRUE,
#BPPARAM = bpparam("SnowParam")
)
return(dds)
}
main <- function(count_input_dir,
feature_input_dir,
select_for,
design_file){
design_formula <- as.formula(readLines(file(design_file,"r")))
close(file(design_file))
matrices <- generate_matrices(count_pth = count_input_dir, feature_pth = feature_input_dir,select_for)
dds <- DESeq_pipline(matrices$count_matrix, matrices$feature_matrix, design_formula = design_formula)
res <- results(dds)
}
count_input_dir <- "/home/alma/ST-2018/CNNp/DGE/data/test_dge_expression"
feature_input_dir <- "/home/alma/ST-2018/CNNp/DGE/data/YAO_feature_files"
design_file <- "/home/alma/ST-2018/CNNp/DGE/data/test_data/design_file_test.dat"
select_for = NULL
main(count_input_dir = count_input_dir, feature_input_dir = feature_input_dir, design_file = design_file, select_for = NULL)
generate_matrices <- function(count_pth,feature_pth,select_for ){
pattern_cnt <- "count.*tsv"
pattern_fea <-"*tsv"
count_files <- sort(list.files(count_pth,pattern = pattern_cnt))
if (!is.null(select_for)) {
selected_samples <- readLines(file(select_for,"r"))
selected_samples <- selected_samples[sapply(selected_samples, function(x) x != "")]
unlink(select_for)
count_files <- count_files[sapply(count_files, function(x) get_id(x) %in% selected_samples)]
}
feature_files <- list.files(feature_pth, pattern = pattern_fea)
count_matrix <- data.frame()
feature_matrix <- data.frame()
for(k in c(1:length(count_files))) {
cmat <- load_matrix(count_pth,count_files[k])
cmat <- clean_matrix(cmat)
tag <- get_id(count_files[k])
fmat_name <- grep(paste(c(".*",tag,".*"),collapse = ""),feature_files)
fmat <- load_features(feature_pth,feature_files[fmat_name])
inter <- intersect(rownames(fmat),rownames(cmat))
fmat <-fmat[inter,]
fmat[c('patient','replicate')] <- unlist(strsplit(tag,'_'))
cmat <- cmat[inter,]
count_matrix <- bind_rows(count_matrix,cmat)
feature_matrix <- bind_rows(feature_matrix,fmat)
}
rownames(count_matrix) <- c(1:dim(count_matrix)[1])
rownames(feature_matrix) <- c(1:dim(feature_matrix)[1])
count_matrix <- count_matrix[seq(1,1000,10),c(1:500)]
feature_matrix <- feature_matrix[seq(1,1000,10),]
count_matrix[is.na(count_matrix)] <- 0
count_matrix <-t(count_matrix)
return(list(count_matrix = count_matrix, colData = feature_matrix))
}
main(count_input_dir = count_input_dir, feature_input_dir = feature_input_dir, design_file = design_file, select_for = NULL)
generate_matrices <- function(count_pth,feature_pth,select_for ){
pattern_cnt <- "count.*tsv"
pattern_fea <-"*tsv"
count_files <- sort(list.files(count_pth,pattern = pattern_cnt))
if (!is.null(select_for)) {
selected_samples <- readLines(file(select_for,"r"))
selected_samples <- selected_samples[sapply(selected_samples, function(x) x != "")]
unlink(select_for)
count_files <- count_files[sapply(count_files, function(x) get_id(x) %in% selected_samples)]
}
feature_files <- list.files(feature_pth, pattern = pattern_fea)
count_matrix <- data.frame()
feature_matrix <- data.frame()
for(k in c(1:length(count_files))) {
cmat <- load_matrix(count_pth,count_files[k])
cmat <- clean_matrix(cmat)
tag <- get_id(count_files[k])
fmat_name <- grep(paste(c(".*",tag,".*"),collapse = ""),feature_files)
fmat <- load_features(feature_pth,feature_files[fmat_name])
inter <- intersect(rownames(fmat),rownames(cmat))
fmat <-fmat[inter,]
fmat[c('patient','replicate')] <- unlist(strsplit(tag,'_'))
cmat <- cmat[inter,]
count_matrix <- bind_rows(count_matrix,cmat)
feature_matrix <- bind_rows(feature_matrix,fmat)
}
rownames(count_matrix) <- c(1:dim(count_matrix)[1])
rownames(feature_matrix) <- c(1:dim(feature_matrix)[1])
count_matrix <- count_matrix[seq(1,1000,10),c(1:500)]
feature_matrix <- feature_matrix[seq(1,1000,10),]
count_matrix[is.na(count_matrix)] <- 0
count_matrix <-t(count_matrix)
return(list(count_matrix = count_matrix, feature_matrix = feature_matrix))
}
main(count_input_dir = count_input_dir, feature_input_dir = feature_input_dir, design_file = design_file, select_for = NULL)
res <- main(count_input_dir = count_input_dir, feature_input_dir = feature_input_dir, design_file = design_file, select_for = NULL)
res
res$padj
sort(res$padj)
sort(res$padj)[c(1:10)]
rownames(sort(res$padj)[c(1:10)])
sort(res$padj)[c(1:10)]
res$padj
?sort
q <- res$padj
q
order(q)
res$padj[order(q)]
res
rownames(order(res$padj))[c(0:10)]
rownames(order(res$padj))
rownames(res)[order(res$padj)[c(1:10)]]
res
a <- replicate(3,rnorm(3))
a
a <- replicate(3,rnorm(4))
a
colSums(a)
colMeans(a)
rowSums(a)
rowSums(a) > 0.4
a[,rowSums(a) > 0.4]
a[rowSums(a) > 0.4,]
colMeans(a) > 0.1
a[,colMeans(a) > 0.1]
a
colMeans(a > 0.1)
